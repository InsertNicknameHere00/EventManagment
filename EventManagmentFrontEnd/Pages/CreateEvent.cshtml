@page
@model EventManagmentFrontEnd.Pages.create_eventcshtmlModel
@{
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create/Edit Event - Event Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="css/styles.css" rel="stylesheet">
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-calendar-alt me-2"></i>Event Manager
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/Events">Events</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/CreateEvent">Create Event</a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item protected-nav">
                        <a class="nav-link" href="#" id="logoutBtn">
                            <i class="fas fa-sign-out-alt me-1"></i>Logout
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <!-- Header -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h2 id="pageTitle">Create New Event</h2>
                        <p class="text-muted mb-0">Fill out the details below to create your event</p>
                    </div>
                    <a href="/Events" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-2"></i>Back to Events
                    </a>
                </div>

                <!-- Event Form -->
                <div class="card shadow">
                    <div class="card-body p-4">
                        <form id="eventForm" novalidate>
                            <div class="row">
                                <!-- Event Name -->
                                <div class="col-12 mb-3">
                                    <label for="eventName" class="form-label">Event Name <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-tag"></i></span>
                                        <input type="text" class="form-control" id="eventName" name="name" required maxlength="200">
                                        <div class="invalid-feedback">
                                            Please provide a valid event name.
                                        </div>
                                    </div>
                                </div>

                                <!-- Event Description -->
                                <div class="col-12 mb-3">
                                    <label for="eventDescription" class="form-label">Description <span class="text-danger">*</span></label>
                                    <textarea class="form-control" id="eventDescription" name="description" rows="4" required maxlength="1000" placeholder="Describe your event..."></textarea>
                                    <div class="invalid-feedback">
                                        Please provide an event description.
                                    </div>
                                    <div class="form-text">
                                        <span id="descriptionCount">0</span>/1000 characters
                                    </div>
                                </div>

                                <!-- Date and Time -->
                                <div class="col-md-6 mb-3">
                                    <label for="eventDate" class="form-label">Event Date <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-calendar"></i></span>
                                        <input type="date" class="form-control" id="eventDate" name="date" required>
                                        <div class="invalid-feedback">
                                            Please select a valid date.
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="eventTime" class="form-label">Event Time <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                        <input type="time" class="form-control" id="eventTime" name="time" required>
                                        <div class="invalid-feedback">
                                            Please select a valid time.
                                        </div>
                                    </div>
                                </div>

                                <!-- Location -->
                                <div class="col-12 mb-3">
                                    <label for="eventLocation" class="form-label">Location <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-map-marker-alt"></i></span>
                                        <input type="text" class="form-control" id="eventLocation" name="location" required maxlength="300" placeholder="Enter event location">
                                        <div class="invalid-feedback">
                                            Please provide a valid location.
                                        </div>
                                    </div>
                                </div>

                                <!-- Max Attendees -->
                                <div class="col-md-6 mb-3">
                                    <label for="maxAttendees" class="form-label">Maximum Attendees</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-users"></i></span>
                                        <input type="number" class="form-control" id="maxAttendees" name="maxAttendees" min="1" max="10000" placeholder="Leave empty for unlimited">
                                        <div class="invalid-feedback">
                                            Please enter a valid number between 1 and 10000.
                                        </div>
                                    </div>
                                    <div class="form-text">Leave empty for unlimited attendees</div>
                                </div>

                                <!-- Additional Information -->
                                <div class="col-12 mb-4">
                                    <label for="additionalInfo" class="form-label">Additional Information</label>
                                    <textarea class="form-control" id="additionalInfo" name="additionalInfo" rows="3" maxlength="500" placeholder="Any additional details, requirements, or notes..."></textarea>
                                    <div class="form-text">
                                        <span id="additionalInfoCount">0</span>/500 characters
                                    </div>
                                </div>

                                <!-- Form Actions -->
                                <div class="col-12">
                                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                        <button type="button" class="btn btn-secondary me-md-2" id="cancelBtn">
                                            <i class="fas fa-times me-2"></i>Cancel
                                        </button>
                                        <button type="submit" class="btn btn-primary" id="submitBtn">
                                            <i class="fas fa-check me-2"></i>Create Event
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toastMessage" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <i class="fas fa-info-circle text-primary me-2"></i>
                <strong class="me-auto">Notification</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body"></div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        let isEditMode = false;
        let eventId = null;

        document.addEventListener('DOMContentLoaded', function () {
            if (!isAuthenticated()) {
                console.log('User not authenticated');
                window.location.href = '/Login';
                return;
            }
            console.log('User authenticated, token:', localStorage.getItem('token')?.substring(0, 20) + '...');
            
            const urlParams = new URLSearchParams(window.location.search);
            eventId = urlParams.get('id');

            if (eventId) {
                isEditMode = true;
                loadEventForEdit(eventId);
            }

            initializeForm();
        });

        function initializeForm() {
            const form = document.getElementById('eventForm');
            const submitBtn = document.getElementById('submitBtn');
            const cancelBtn = document.getElementById('cancelBtn');

            const descriptionTextarea = document.getElementById('eventDescription');
            const additionalInfoTextarea = document.getElementById('additionalInfo');
            const eventDateInput = document.getElementById('eventDate');

            const today = new Date().toISOString().split('T')[0];
            eventDateInput.min = today;

            descriptionTextarea.addEventListener('input', function () {
                document.getElementById('descriptionCount').textContent = this.value.length;
            });

            additionalInfoTextarea.addEventListener('input', function () {
                document.getElementById('additionalInfoCount').textContent = this.value.length;
            });

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                handleFormSubmit(e);
            });

            cancelBtn.addEventListener('click', function () {
                if (confirm('Are you sure you want to cancel? Any unsaved changes will be lost.')) {
                    window.location.href = '/Events';
                }
            });

            initializeAuth();
        }

        async function loadEventForEdit(id) {
            try {
                const token = localStorage.getItem('token');
                const headers = { 'Content-Type': 'application/json' };
                
                if (token) {
                    headers['Authorization'] = `Bearer ${token}`;
                }

                console.log(`Loading event with ID: ${id}`);
                const response = await fetch(`https://localhost:7286/api/Events/${id}`, { headers });
                const result = await response.json();
                console.log('Event data received:', result);

                if (result.success && result.data) {
                    const event = result.data;
                    try {
                        populateForm(event);
                        updateUIForEditMode();
                    } catch (formError) {
                        console.error('Error in form population:', formError);
                        showToast('Error preparing the form: ' + formError.message, 'error');
                    }
                } else {
                    console.error('Failed to load event:', result.message);
                    showToast(result.message || 'Event not found', 'error');
                    setTimeout(() => {
                        window.location.href = '/Events';
                    }, 2000);
                }
            } catch (error) {
                console.error('Error loading event:', error);
                showToast('Error loading event: ' + error.message, 'error');
                setTimeout(() => {
                    window.location.href = '/Events';
                }, 2000);
            }
        }

        function populateForm(event) {
            console.log('Populating form with event data:', event);
            
            try {
                if (document.getElementById('eventName')) {
                    document.getElementById('eventName').value = event.name || '';
                }
                
                if (document.getElementById('eventDescription')) {
                    document.getElementById('eventDescription').value = event.description || '';
                }
                
                if (document.getElementById('eventLocation')) {
                    document.getElementById('eventLocation').value = event.location || '';
                }
                
                if (document.getElementById('maxAttendees')) {
                    document.getElementById('maxAttendees').value = event.maxAttendees || '';
                }
                
                if (document.getElementById('additionalInfo')) {
                    document.getElementById('additionalInfo').value = event.additionalInfo || '';
                }
                if (event.dateTime) {
                    try {
                        const eventDateTime = new Date(event.dateTime);
                        if (document.getElementById('eventDate')) {
                            document.getElementById('eventDate').value = eventDateTime.toISOString().split('T')[0];
                        }
                        if (document.getElementById('eventTime')) {
                            document.getElementById('eventTime').value = eventDateTime.toTimeString().slice(0, 5);
                        }
                    } catch (dateError) {
                        console.error('Error processing date/time:', dateError);
                    }
                }

                if (document.getElementById('descriptionCount')) {
                    document.getElementById('descriptionCount').textContent = event.description ? event.description.length : 0;
                }
                
                if (document.getElementById('additionalInfoCount')) {
                    document.getElementById('additionalInfoCount').textContent = event.additionalInfo ? event.additionalInfo.length : 0;
                }
                
                console.log('Form population completed successfully');
            } catch (error) {
                console.error('Error populating form:', error);
                throw error;
            }
        }

        function updateUIForEditMode() {
            document.getElementById('pageTitle').textContent = 'Edit Event';
            document.querySelector('.text-muted').textContent = 'Update the event details below';
            document.getElementById('submitBtn').innerHTML = '<i class="fas fa-save me-2"></i>Update Event';
            document.title = 'Edit Event - Event Management';
        }

        async function handleFormSubmit(e) {
            e.preventDefault();

            if (!document.getElementById('eventForm').checkValidity()) {
                e.stopPropagation();
                document.getElementById('eventForm').classList.add('was-validated');
                return;
            }

            const token = localStorage.getItem('token');
            const userEmail = localStorage.getItem('userEmail');

            if (!token || !userEmail) {
                showToast('Please log in to save events', 'error');
                window.location.href = '/Login';
                return;
            }

            const formData = new FormData(e.target);
            const eventData = {
                name: formData.get('name'),
                description: formData.get('description'),
                location: formData.get('location'),
                maxAttendees: formData.get('maxAttendees') ? parseInt(formData.get('maxAttendees')) : null,
                additionalInfo: formData.get('additionalInfo'),
                dateTime: formData.get('date') && formData.get('time') ?
                    new Date(formData.get('date') + 'T' + formData.get('time')).toISOString() : null,
                status: 'active',
                creatorEmail: userEmail
            };

            try {
                const submitBtn = document.getElementById('submitBtn');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Saving...';
                submitBtn.disabled = true;

                let response;
                let successMessage;
                let redirectUrl;

                if (isEditMode && eventId) {
                    response = await fetch(`https://localhost:7286/api/Events/${eventId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify(eventData)
                    });
                    successMessage = 'Event updated successfully!';
                    redirectUrl = `/EventDetails?id=${eventId}`;
                } else {
                    response = await fetch('https://localhost:7286/api/Events', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify(eventData)
                    });
                    successMessage = 'Event created successfully!';
                    redirectUrl = '/Events';
                }

                if (response.status === 401) {
                    console.log('Authentication failed - token may have expired');
                    showToast('Your session has expired. Please log in again.', 'error');
                    
                    localStorage.removeItem('token');
                    localStorage.removeItem('userEmail');
                    
                    setTimeout(() => {
                        window.location.href = '/Login';
                    }, 2000);
                    return;
                }

                let result;
                const responseText = await response.text();
                try {
                    if (responseText) {
                        result = JSON.parse(responseText);
                    } else {
                        result = { success: false, message: 'No response from server' };
                    }
                } catch (e) {
                    console.error('Error parsing response:', e, responseText);
                    result = { success: false, message: 'Invalid response from server' };
                }

                if (response.ok && result.success) {
                    showToast(successMessage, 'success');
                    setTimeout(() => {
                        window.location.href = redirectUrl;
                    }, 1500);
                } else {
                    showToast(result.message || 'Error saving event', 'error');
                    console.error('Server response:', result);
                }
            } catch (error) {
                console.error('Error saving event:', error);
                showToast('An error occurred while saving the event', 'error');
            } finally {
                const submitBtn = document.getElementById('submitBtn');
                if (isEditMode) {
                    submitBtn.innerHTML = '<i class="fas fa-save me-2"></i>Update Event';
                } else {
                    submitBtn.innerHTML = '<i class="fas fa-check me-2"></i>Create Event';
                }
                submitBtn.disabled = false;
            }
        }

        function showToast(message, type = 'info') {
            const toast = document.getElementById('toastMessage');
            const toastBody = toast.querySelector('.toast-body');
            toastBody.textContent = message;

            toast.classList.remove('bg-success', 'bg-danger', 'bg-info');
            if (type === 'success') toast.classList.add('bg-success', 'text-white');
            if (type === 'error') toast.classList.add('bg-danger', 'text-white');
            if (type === 'info') toast.classList.add('bg-info', 'text-white');

            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
        }

        function isAuthenticated() {
            const token = localStorage.getItem('token');
            return !!token;
        }

        function initializeAuth() {
            const token = localStorage.getItem('token');
            const isLoggedIn = !!token;
            
            document.querySelectorAll('.protected-nav').forEach(el => {
                el.style.display = isLoggedIn ? 'block' : 'none';
            });
            
            document.querySelectorAll('.auth-nav').forEach(el => {
                el.style.display = isLoggedIn ? 'none' : 'block';
            });
            const logoutBtn = document.getElementById('logoutBtn');
            if (logoutBtn) {
                logoutBtn.addEventListener('click', function() {
                    localStorage.removeItem('token');
                    localStorage.removeItem('userEmail');
                    window.location.href = '/';
                });
            }
        }
    </script>
</body>
</html>